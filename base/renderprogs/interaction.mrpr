renderProg interaction
{
	vertex
	{
		vec3 vNormal = attr_Normal.xyz;
		vec3 vTangent = attr_Tangent.xyz;
		vec3 vBinormal = attr_Bitangent.xyz;
		
		gl_Position = ftransform();
		
		//calculate vector to light in R0
		vec4 toLight = $lightorigin - gl_Vertex;
		
		vec4 defaultTexCoord = vec4( 0.0f, 0.5f, 0.0f, 1.0f );
		
		gl_TexCoord[0].x = dot3( vTangent.xyz, toLight );
		gl_TexCoord[0].y = dot3( vBinormal, toLight );
		gl_TexCoord[0].z = dot3( vNormal, toLight );
		gl_TexCoord[0].w = 1.0f;
		
		//textures 1 takes the base coordinates by the texture matrix
		gl_TexCoord[1] = defaultTexCoord;
		gl_TexCoord[1].x = dot4( attr_TexCoord0.xy, $rpbumpmatrixs );
		gl_TexCoord[1].y = dot4( attr_TexCoord0.xy, $rpbumpmatrixt );
		
		//# texture 2 has one texgen
		gl_TexCoord[2] = defaultTexCoord;
		gl_TexCoord[2].x = dot4( gl_Vertex, $rplightfalloffs );

		//# texture 3 has three texgens
		gl_TexCoord[3].x = dot4( gl_Vertex, $rplightprojections );
		gl_TexCoord[3].y = dot4( gl_Vertex, $rplightprojectiont );
		gl_TexCoord[3].z = 0.0f;
		gl_TexCoord[3].w = dot4( gl_Vertex, $rplightprojectionq );

		//# textures 4 takes the base coordinates by the texture matrix
		gl_TexCoord[4] = defaultTexCoord;
		gl_TexCoord[4].x = dot4( attr_TexCoord0.xy, $rpdiffusematrixs );
		gl_TexCoord[4].y = dot4( attr_TexCoord0.xy, $rpdiffusematrixt );

		//# textures 5 takes the base coordinates by the texture matrix
		gl_TexCoord[5] = defaultTexCoord;
		gl_TexCoord[5].x = dot4( attr_TexCoord0.xy, $rpspecularmatrixs );
		gl_TexCoord[5].y = dot4( attr_TexCoord0.xy, $rpspecularmatrixt );
				
		//# calculate normalized vector to light in R0
		toLight = normalize( toLight );

		//# calculate normalized vector to viewer in R1
		vec4 toView = normalize( $vieworigin - gl_Vertex );
		
		//# add together to become the half angle vector in object space (non-normalized)
		vec4 halfAngleVector = toLight + toView;

		//# put into texture space
		gl_TexCoord[6].x = dot3( vTangent.xyz, halfAngleVector );
		gl_TexCoord[6].y = dot3( vBinormal, halfAngleVector );
		gl_TexCoord[6].z = dot3( vNormal, halfAngleVector );
		gl_TexCoord[6].w = 1.0f;
		
		gl_TexCoord[7].xyz = attr_Normal; //gl_Color * vertexcolormodulate + vertexcoloradd;
	}

	pixel
	{
		vec4 bumpMap =			tex2D( $bumpmap, gl_TexCoord[1].xy );
		vec4 lightFalloff =	idtex2Dproj( $lightfallofftex, gl_TexCoord[2] );
		vec4 lightProj	=		idtex2Dproj( $lightprogtex, gl_TexCoord[3] );
		vec4 diffuseMap =			tex2D( $albedotexture, gl_TexCoord[4].xy );
		vec4 specMap =			tex2D( $specularmap, gl_TexCoord[5].xy );

		vec3 lightVector = normalize( gl_TexCoord[0].xyz );

		bumpMap.x = bumpMap.w;
		vec3 localNormal = vec3(bumpMap.r, bumpMap.g, bumpMap.b);
		localNormal = localNormal * 2.0 - 1.0;

		const float specularPower = 1		0.0f;
		float hDotN = dot3( normalize( gl_TexCoord[6].xyz ), localNormal );
		vec3 specularContribution = vec3( pow(hDotN, specularPower) );

		vec3 diffuseColor = diffuseMap.xyz * $rpdiffusemodifier.xyz;
		vec3 specularColor = specMap.xyz * specularContribution;
		vec3 lightColor = dot3( localNormal, lightVector ) * lightProj.xyz * lightFalloff.xyz;

		gl_FragColor.xyz = ( diffuseColor.xyz + specularColor ) * lightColor;
		gl_FragColor.w = 1.0;
	}
}