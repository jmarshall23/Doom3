/***********************************************************************

ai_monster_demon_imp.script

monster_demon_imp
monster_demon_imp_crawler

***********************************************************************/

object monster_demon_imp : monster_base {
	string		range_attack_anim;
	vector		jumpVelocity;
	
	// torso anim states
	void		Torso_Idle();
	void		Torso_Pain();
	void		Torso_MeleeAttack();
	void		Torso_RangeAttack();
	void		Torso_TurretAttack();
	void		Torso_TurretAttackIdle();
	void		Torso_LeapAttack();
	
	// legs anim states
	void		Legs_Idle();
	void		Legs_Walk();
	void		Legs_Run();
	void		Legs_DodgeLeft();
	void		Legs_DodgeRight();
};

/***********************************************************************

	Torso animation control

***********************************************************************/

void monster_demon_imp::Torso_Idle() {
	idleAnim( ANIMCHANNEL_TORSO, "stand" );
	
	eachFrame {
		if ( AI_PAIN ) { animState( ANIMCHANNEL_TORSO, "Torso_Pain", 3 ); }
	}
}

void monster_demon_imp::Torso_Pain() {
	string animname;
	float nextpain;
	float currenttime;
	
	animname = getPainAnim();
	playAnim( ANIMCHANNEL_TORSO, animname );

	nextpain = sys.getTime() + 0.25;
	
	while( !animDone( ANIMCHANNEL_TORSO, 6 ) ) {
		if ( AI_PAIN ) {
			currenttime = sys.getTime();
			if ( currenttime > nextpain ) {
				animState( ANIMCHANNEL_TORSO, "Torso_Pain", 3 );
			}
		}
		waitFrame();
	}

	finishAction( "pain" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 6 );
}

void monster_demon_imp::Torso_MeleeAttack() {
	playAnim( ANIMCHANNEL_TORSO, "melee_attack" );

	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		waitFrame();
	}
	
	finishAction( "melee_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

void monster_demon_imp::Torso_RangeAttack() {
	disablePain();
// jmarshall - can't pass idStr to doomscript for some reason, hard coding
	//playAnim( ANIMCHANNEL_TORSO, range_attack_anim );
	playAnim( ANIMCHANNEL_TORSO, "turret_attack" );
// jmarshall end
	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		lookAtEnemy( 1 );	
		waitFrame();
	}

	allowMovement( true );
	finishAction( "range_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

void monster_demon_imp::Torso_TurretAttack() {
	allowMovement( false );
	disablePain();
	faceEnemy();

	playAnim( ANIMCHANNEL_TORSO, "turret_attack" );
	while( !animDone( ANIMCHANNEL_TORSO, 2 ) ) {
		waitFrame();
	}

	finishAction( "turret_attack" );
	allowMovement( true );
	animState( ANIMCHANNEL_TORSO, "Torso_TurretAttackIdle", 0 );
}

void monster_demon_imp::Torso_TurretAttackIdle() {
	faceEnemy();
	idleAnim( ANIMCHANNEL_TORSO, "turret_idle" );
	while( 1 ) {
		waitFrame();
	}
}

void monster_demon_imp::Torso_LeapAttack() {
	overrideAnim( ANIMCHANNEL_LEGS );
	disablePain();
	playAnim( ANIMCHANNEL_TORSO, "jump_start" );
	while( !animDone( ANIMCHANNEL_TORSO, 2 ) ) {
		waitFrame();
	}
	
	setBlendFrames( ANIMCHANNEL_TORSO, 2 );
	attackBegin( "melee_impLeapAttack" );
	setLinearVelocity( jumpVelocity );
	
	playCycle( ANIMCHANNEL_TORSO, "jump_loop" );
	do {
		waitFrame();
	} while( !AI_ONGROUND );
	
	attackEnd();
	playAnim( ANIMCHANNEL_TORSO, "jump_end" );
	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		waitFrame();
	}

	finishAction( "leap_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

/***********************************************************************

	Legs animation control

***********************************************************************/

void monster_demon_imp::Legs_Idle() {
	idleAnim( ANIMCHANNEL_LEGS, "stand" );

	eachFrame {
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 4 ); }
		if ( AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 4 ); }
	}
}

void monster_demon_imp::Legs_Walk() {
	playCycle( ANIMCHANNEL_LEGS, "walk" );
	
	eachFrame {
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 4 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 ); }
	}
}

void monster_demon_imp::Legs_Run() {
	playCycle( ANIMCHANNEL_LEGS, "run" );
	
	eachFrame {
		if ( !run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 4 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 ); }
	}
}

void monster_demon_imp::Legs_DodgeLeft() {
	playAnim( ANIMCHANNEL_LEGS, "evade_left" );

	while( !animDone( ANIMCHANNEL_LEGS, 4 ) ) {
		waitFrame();
	}
	
	finishAction( "strafe" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 );
}

void monster_demon_imp::Legs_DodgeRight() {
	playAnim( ANIMCHANNEL_LEGS, "evade_right" );

	while( !animDone( ANIMCHANNEL_LEGS, 4 ) ) {
		waitFrame();
	}

	finishAction( "strafe" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 );
}



/***********************************************************************

	attacks

***********************************************************************/


/*
=====================
monster_demon_imp::path_jump
=====================
*/
//void monster_demon_imp::path_jump() {
//	entity target;
//	vector dir;
//	vector jumpTarget;
//
//	// walk to the path entity first
//	path_corner();
//
//	if ( checkForEnemy( true ) ) {
//		return;
//	}
//
//	target = current_path.randomPath();
//	if ( !target ) {
//		sys.error( "missing target for '" + current_path.getName() + "'" );
//	}
//	jumpTarget = target.getOrigin();
//	if ( !current_path.getKey( "up" ) ) {
//		jumpVelocity = getJumpVelocity( jumpTarget, IMP_LEAP_SPEED, 1024 );
//		if ( jumpVelocity == '0 0 0' ) {
//			sys.error( "Monster '" + getName() + "' couldn't make jump from '" + current_path.getName() + "' to '" + target.getName() + "'" );
//		}
//	} else {
//		float forward = current_path.getFloatKey( "forward" );
//		if ( forward <= 0 ) {
//			sys.error( "Invalid forward velocity on path_jump entity '" + current_path.getName() + "'\n" );
//		}
//		dir = jumpTarget - getOrigin();
//		dir_z = 0;
//		dir = sys.vecNormalize( dir );
//		dir = dir * forward;
//		dir_z = current_path.getFloatKey( "up" );
//		jumpVelocity = dir;
//	}
//	
//	stopMove();
//	turnToPos( jumpTarget );
//	while( !facingIdeal() ) {
//		if ( checkForEnemy( true ) ) {
//			return;
//		}
//		waitFrame();
//	}
//
//	animState( ANIMCHANNEL_TORSO, "Torso_LeapAttack", 4 );	
//	waitAction( "leap_attack" );
//
//	stopMove();
//}
