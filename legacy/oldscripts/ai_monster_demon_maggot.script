/***********************************************************************

ai_monster_demon_maggot.script

monster_demon_maggot

***********************************************************************/

#define MAGGOT_RUNDISTANCE		192
#define MAGGOT_ATTACK_RATE		1
#define MAGGOT_LEAP_RATE		7
#define MAGGOT_LEAP_SPEED		650
#define MAGGOT_LEAP_MAXHEIGHT	48
#define MAGGOT_DODGE_RATE		8
#define MAGGOT_LEAP_RANGE_MIN	200
#define MAGGOT_LEAP_RANGE_MAX	480

object monster_demon_maggot : monster_base {
	float		nextDodge;
	float		nextLeap;
	vector		jumpVelocity;
	entity		combat_node;

	//
	// States
	//
	void		state_Begin();
	void		state_Idle();

	// attacks
	float		check_attacks();
	void		do_attack( float attack_flags );
	void		combat_leap();
	void		combat_melee();
	void		combat_dodge_left();
	void		combat_dodge_right();

	void		init();
	void		path_jump();
	
	// torso anim states
	void		Torso_Idle();
	void		Torso_Pain();
	void		Torso_MeleeAttack();
	void		Torso_LeapAttack();
	
	// legs anim states
	void		Legs_Idle();
	void		Legs_Walk();
	void		Legs_Run();
	void		Legs_DodgeLeft();
	void		Legs_DodgeRight();
};

/***********************************************************************

	Torso animation control

***********************************************************************/

void monster_demon_maggot::Torso_Idle() {
	idleAnim( ANIMCHANNEL_TORSO, "idle" );
	
	eachFrame {
		if ( AI_PAIN ) { animState( ANIMCHANNEL_TORSO, "Torso_Pain", 2 ); }
	}
}

void monster_demon_maggot::Torso_Pain() {
	string animname;
	float nextpain;
	float currenttime;
	
	animname = getPainAnim();
	playAnim( ANIMCHANNEL_TORSO, animname );

	nextpain = sys.getTime() + 0.25;
	
	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		if ( AI_PAIN ) {
			currenttime = sys.getTime();
			if ( currenttime > nextpain ) {
				animState( ANIMCHANNEL_TORSO, "Torso_Pain", 2 );
			}
		}
		waitFrame();
	}

	finishAction( "pain" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

void monster_demon_maggot::Torso_MeleeAttack() {
	playAnim( ANIMCHANNEL_TORSO, "melee_attack" );

	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		waitFrame();
	}
	
	finishAction( "melee_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

void monster_demon_maggot::Torso_LeapAttack() {
	overrideAnim( ANIMCHANNEL_LEGS );
	disablePain();
	playAnim( ANIMCHANNEL_TORSO, "jump_start" );
	while( !animDone( ANIMCHANNEL_TORSO, 2 ) ) {
		waitFrame();
	}
	
	attackBegin( "melee_maggotLeapAttack" );
	setLinearVelocity( jumpVelocity );
	
	playCycle( ANIMCHANNEL_TORSO, "jump_loop" );
	do {
		waitFrame();
	} while( !AI_ONGROUND );
	
	attackEnd();
	playAnim( ANIMCHANNEL_TORSO, "jump_end" );
	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		waitFrame();
	}

	finishAction( "leap_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

/***********************************************************************

	Legs animation control

***********************************************************************/

void monster_demon_maggot::Legs_Idle() {
	idleAnim( ANIMCHANNEL_LEGS, "idle" );

	eachFrame {
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 4 ); }
		if ( AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 4 ); }
	}
}

void monster_demon_maggot::Legs_Walk() {
	playCycle( ANIMCHANNEL_LEGS, "walk" );
	
	eachFrame {
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 4 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 ); }
	}
}

void monster_demon_maggot::Legs_Run() {
	playCycle( ANIMCHANNEL_LEGS, "run" );
	
	eachFrame {
		if ( !run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 4 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 ); }
	}
}

void monster_demon_maggot::Legs_DodgeLeft() {
	playAnim( ANIMCHANNEL_LEGS, "evade_left" );

	while( !animDone( ANIMCHANNEL_LEGS, 2 ) ) {
		waitFrame();
	}
	
	finishAction( "strafe" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 2 );
}

void monster_demon_maggot::Legs_DodgeRight() {
	playAnim( ANIMCHANNEL_LEGS, "evade_right" );

	while( !animDone( ANIMCHANNEL_LEGS, 2 ) ) {
		waitFrame();
	}

	finishAction( "strafe" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 2 );
}

/***********************************************************************

	AI

***********************************************************************/

/*
=====================
monster_demon_maggot::init
=====================
*/
void monster_demon_maggot::init() {
	setState( "state_Begin" );
}

/***********************************************************************

	States

***********************************************************************/

/*
=====================
monster_demon_maggot::state_Begin
=====================
*/
void monster_demon_maggot::state_Begin() {
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 0 );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 0 );	

	monster_begin();

	run_distance	= MAGGOT_RUNDISTANCE;

	setMoveType( MOVETYPE_ANIM );
	setState( "state_Idle" );
}

/*
=====================
monster_demon_maggot::state_Idle
=====================
*/
void monster_demon_maggot::state_Idle() {
	wait_for_enemy();

	nextLeap	= RandomTime( MAGGOT_LEAP_RATE );
	nextDodge	= RandomTime( MAGGOT_DODGE_RATE );

	setState( "state_Combat" );
}

/***********************************************************************

	attacks

***********************************************************************/

/*
=====================
monster_demon_maggot::do_attack
=====================
*/
void monster_demon_maggot::do_attack( float attack_flags ) {
	if ( attack_flags & ATTACK_DODGE_LEFT ) {
		combat_dodge_left();
	} else if ( attack_flags & ATTACK_DODGE_RIGHT ) {
		combat_dodge_right();
	} else if ( attack_flags & ATTACK_COMBAT_NODE ) {
		combat_ainode( combat_node );
	} else if ( attack_flags & ATTACK_MELEE ) {
		combat_melee();
	} else if ( attack_flags & ATTACK_LEAP ) {
		combat_leap();
	}
}

/*
=====================
monster_demon_maggot::check_attacks
=====================
*/
float monster_demon_maggot::check_attacks() {
	float range;
	float currentTime;
	float canMelee;
	float attack_flags;
	float checkLeap;
	vector vel;
	float t;
	vector jumpTarget;
	
	attack_flags = 0;
	
	canMelee = testMeleeAttack();
	currentTime = sys.getTime();
	if ( !canMelee ) {
		if ( AI_PAIN && ( currentTime >= nextDodge ) ) {
			if ( testAnimMove( "evade_left" ) ) {
				attack_flags |= ATTACK_DODGE_LEFT;
			}
			if ( testAnimMove( "evade_right" ) ) {
				attack_flags |= ATTACK_DODGE_RIGHT;
				
				// if we can dodge either direction, pick one
				if ( attack_flags & ATTACK_DODGE_LEFT ) {
					if ( sys.random( 100 ) < 50 ) {
						attack_flags &= ~ATTACK_DODGE_RIGHT;
					} else {
						attack_flags &= ~ATTACK_DODGE_LEFT;
					}
				}
			}
		}
	
		combat_node = getCombatNode();
		if ( combat_node ) {
			attack_flags |= ATTACK_COMBAT_NODE;
		}
	}
	
	if ( canMelee ) {
		attack_flags |= ATTACK_MELEE;
	}
	
	if ( AI_ENEMY_IN_FOV ) {
		range = enemyRange();
		if ( ( range >= MAGGOT_LEAP_RANGE_MIN ) && ( range < MAGGOT_LEAP_RANGE_MAX ) && ( currentTime >= nextLeap ) ) {
			if ( canHitEnemy() ) {
				t = animLength( ANIMCHANNEL_TORSO, "jump_start" );
				jumpTarget = predictEnemyPos( t );
				jumpVelocity = getJumpVelocity( jumpTarget, MAGGOT_LEAP_SPEED, MAGGOT_LEAP_MAXHEIGHT );
				if ( jumpVelocity != '0 0 0' ) {
					attack_flags |= ATTACK_LEAP;
				} else {
					// check if we can leap again in 2 seconds
					nextLeap = DelayTime( 2 );
				}
			}
		}
	}
	
	return attack_flags;
}

/*
=====================
monster_demon_maggot::combat_leap
=====================
*/
void monster_demon_maggot::combat_leap() {
	stopMove();
	turnToPos( getOrigin() + jumpVelocity );
	animState( ANIMCHANNEL_TORSO, "Torso_LeapAttack", 4 );	
	waitAction( "leap_attack" );
	nextLeap = DelayTime( MAGGOT_LEAP_RATE );
}

/*
=====================
monster_demon_maggot::combat_melee
=====================
*/
void monster_demon_maggot::combat_melee() {
	lookAtEnemy( 100 );
	faceEnemy();
	animState( ANIMCHANNEL_TORSO, "Torso_MeleeAttack", 5 );
	waitAction( "melee_attack" );
	lookAtEnemy( 1 );
}

/*
=====================
monster_demon_maggot::combat_dodge_left
=====================
*/
void monster_demon_maggot::combat_dodge_left() {
	stopMove();
	faceEnemy();
	animState( ANIMCHANNEL_LEGS, "Legs_DodgeLeft", 2 );
	waitAction( "strafe" );
	nextDodge = DelayTime( MAGGOT_DODGE_RATE );
	moveToEnemy();
}

/*
=====================
monster_demon_maggot::combat_dodge_right
=====================
*/
void monster_demon_maggot::combat_dodge_right() {
	stopMove();
	faceEnemy();
	animState( ANIMCHANNEL_LEGS, "Legs_DodgeRight", 2 );	
	waitAction( "strafe" );
	nextDodge = DelayTime( MAGGOT_DODGE_RATE );
	moveToEnemy();
}

/*
=====================
monster_demon_maggot::path_jump
=====================
*/
void monster_demon_maggot::path_jump() {
	entity target;
	vector dir;
	vector jumpTarget;

	// walk to the path entity first
	path_corner();

	if ( checkForEnemy( true ) ) {
		return;
	}

	target = current_path.randomPath();
	if ( !target ) {
		sys.error( "missing target for '" + current_path.getName() + "'" );
	}
	jumpTarget = target.getOrigin();
	if ( !current_path.getKey( "up" ) ) {
		jumpVelocity = getJumpVelocity( jumpTarget, MAGGOT_LEAP_SPEED, 1024 );
		if ( jumpVelocity == '0 0 0' ) {
			sys.error( "Monster '" + getName() + "' couldn't make jump from '" + current_path.getName() + "' to '" + target.getName() + "'" );
		}
	} else {
		float forward = current_path.getFloatKey( "forward" );
		if ( forward <= 0 ) {
			sys.error( "Invalid forward velocity on path_jump entity '" + current_path.getName() + "'\n" );
		}
		dir = jumpTarget - getOrigin();
		dir_z = 0;
		dir = sys.vecNormalize( dir );
		dir = dir * forward;
		dir_z = current_path.getFloatKey( "up" );
		jumpVelocity = dir;
	}
	
	stopMove();
	turnToPos( jumpTarget );
	while( !facingIdeal() ) {
		if ( checkForEnemy( true ) ) {
			return;
		}
		waitFrame();
	}

	animState( ANIMCHANNEL_TORSO, "Torso_LeapAttack", 4 );	
	waitAction( "leap_attack" );

	stopMove();
}
