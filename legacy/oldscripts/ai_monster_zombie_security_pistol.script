/***********************************************************************

ai_monster_zombie_security_pistol.script

monster_zombie_sergeant
monster_zsec_shotgun
monster_zsec_p90_helmet
monster_zsec_p90_zombie
monster_zsec_pistol_shield

***********************************************************************/

#define ZSECP_RUNDISTANCE				192
#define ZSECP_WALKTURN					65
#define ZSECP_DODGE_RATE				3
#define ZSECP_ATTACK_DELAY_MIN			0.5
#define ZSECP_ATTACK_DELAY_MAX			2
#define ZSECP_ATTACK_MAX_LENGTH			3
#define ZSECP_ATTACK_MIN_LENGTH			1
#define ZSECP_WAIT_MIN_LENGTH			0.3
#define ZSECP_WAIT_MAX_LENGTH			1.5
#define ZSECP_CROUCH_ATTACK_MAX_LENGTH	15
#define ZSECP_CROUCH_ATTACK_MIN_LENGTH	3
#define ZSECP_STAND_ATTACK_MAX_LENGTH	15
#define ZSECP_STAND_ATTACK_MIN_LENGTH	3
#define ZSECP_ATTACK_MIN_SHOOT_TIME		0.5
#define ZSECP_NOFOVTIME					4

#define ATTACK_ZSECP_CROUCHFIRE			ATTACK_SPECIAL1

// start out with a 50/50 chance of stand vs. crouch attacks.
float zsecp_num_stand_attacks = 1;
float zsecp_num_crouch_attacks = 1;

object monster_zombie_security_pistol : monster_zombie {
	boolean		fire;
	boolean		crouch_fire;
	boolean		run_attack;
	float		nextDodge;
	float		nextAttack;
	float		nextNoFOVAttack;

	// torso anim states
	void		Torso_Idle();
	void		Torso_Pain();
	void		Torso_RangeAttack();
	void		Torso_TurretAttack();
	void		Torso_CrouchAttack();
	
	// legs anim states
	void		Legs_Idle();
	void		Legs_Walk();
	void		Legs_Run();
	void		Legs_DodgeLeft();
	void		Legs_DodgeRight();
	void		Legs_StepLeft();
	void		Legs_StepRight();
};

/***********************************************************************

	Torso animation control

***********************************************************************/

void monster_zombie_security_pistol::Torso_Idle() {
	idleAnim( ANIMCHANNEL_TORSO, "stand" );
	
	eachFrame {
		if ( AI_PAIN ) {
			Torso_Pain();
			idleAnim( ANIMCHANNEL_TORSO, "stand" );
		}
		if ( fire ) {
			animState( ANIMCHANNEL_TORSO, "Torso_RangeAttack", 4 );
		}
		if ( crouch_fire ) {
			animState( ANIMCHANNEL_TORSO, "Torso_CrouchAttack", 4 );
		}
	}
}

void monster_zombie_security_pistol::Torso_Pain() {
	string animname;

	animname = getPainAnim();
	setBlendFrames( ANIMCHANNEL_TORSO, 2 );
	playAnim( ANIMCHANNEL_TORSO, animname );

	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		waitFrame();
	}
	
	// no pain for 1 second
	preventPain( 1 );
	
	finishAction( "pain" );
	setBlendFrames( ANIMCHANNEL_TORSO, 4 );
}

void monster_zombie_security_pistol::Torso_RangeAttack() {
	float endtime;
	float mintime;
	boolean first_shot;
	
	setAnimPrefix( "" );

	playAnim( ANIMCHANNEL_TORSO, "range_attack" );
	while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
	
	first_shot = true;
	while( ( fire || first_shot ) && !sys.influenceActive() ) {
		mintime = sys.getTime() + ZSECP_ATTACK_MIN_SHOOT_TIME;
		endtime = RandomDelay( ZSECP_ATTACK_MIN_LENGTH, ZSECP_ATTACK_MAX_LENGTH );
		while( ( fire || ( sys.getTime() < mintime ) ) && ( sys.getTime() < endtime ) ) {
			playAnim( ANIMCHANNEL_TORSO, "range_attack_loop" );
			while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
				if ( sys.influenceActive() ) {
					endtime = 0;
					fire = false;
					break;
				}

				if ( AI_FORWARD ) {
					if ( !entityInAttackCone( getEnemy() ) ) {
						endtime = 0;
						fire = false;
						break;
					}
				}

				if ( AI_PAIN ) {
					Torso_Pain();
				}
				waitFrame();
			}
		}

		first_shot = false;
		if ( !fire ) {
			break;
		}

		playCycle( ANIMCHANNEL_TORSO, "range_attack_aim" );
		endtime = RandomDelay( ZSECP_WAIT_MIN_LENGTH, ZSECP_WAIT_MAX_LENGTH );
		while( fire && ( sys.getTime() < endtime ) ) {
			if ( sys.influenceActive() ) {
				fire = false;
				break;
			}
			if ( AI_FORWARD ) {
				if ( !entityInAttackCone( getEnemy() ) ) {
					break;
				}
			}
			if ( AI_PAIN ) {
				Torso_Pain();
			}
			waitFrame();
		}
	}
	
	playAnim( ANIMCHANNEL_TORSO, "range_attack_end" );
	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
	
	finishAction( "range_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

void monster_zombie_security_pistol::Torso_TurretAttack() {
	float endtime;
	float mintime;
	boolean first_shot;
	
	if(getIntKey("turret_crouch")) {
		setAnimPrefix( "crouch" );
	} else {
		setAnimPrefix( "" );
	}
	
		
	playAnim( ANIMCHANNEL_TORSO, "range_attack" );
	while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
	
	first_shot = true;
	while( ( first_shot || canHitEnemyFromAnim( "range_attack_loop" ) ) && !sys.influenceActive() ) {
		mintime = sys.getTime() + ZSECP_ATTACK_MIN_SHOOT_TIME;
		endtime = RandomDelay( ZSECP_ATTACK_MIN_LENGTH, ZSECP_ATTACK_MAX_LENGTH );
		while( ( sys.getTime() < mintime ) || ( ( sys.getTime() < endtime ) && canHitEnemyFromAnim( "range_attack_loop" ) ) ) {
			playAnim( ANIMCHANNEL_TORSO, "range_attack_loop" );
			while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
				if ( sys.influenceActive() ) {
					endtime = 0;
					break;
				}
				if ( AI_PAIN ) {
					Torso_Pain();
				}
				waitFrame();
			}
		}
		first_shot = false;

		playCycle( ANIMCHANNEL_TORSO, "range_attack_aim" );
		endtime = RandomDelay( ZSECP_WAIT_MIN_LENGTH, ZSECP_WAIT_MAX_LENGTH );
		while( fire && ( sys.getTime() < endtime ) ) {
			if ( sys.influenceActive() ) {
				break;
			}
			if ( AI_PAIN ) {
				Torso_Pain();
			}
			waitFrame();
		}
	}
	
	playAnim( ANIMCHANNEL_TORSO, "range_attack_end" );
	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
	
	finishAction( "turret_attack" );
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 4 );
}

void monster_zombie_security_pistol::Torso_CrouchAttack() {
	float endtime;
	float mintime;
	boolean first_shot;
	
	overrideAnim( ANIMCHANNEL_LEGS );
	
	setAnimPrefix( "crouch" );

	playAnim( ANIMCHANNEL_TORSO, "range_attack" );
	while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}

	first_shot = true;
	while( ( crouch_fire || first_shot ) && !sys.influenceActive() ) {
		mintime = sys.getTime() + ZSECP_ATTACK_MIN_SHOOT_TIME;
		endtime = RandomDelay( ZSECP_ATTACK_MIN_LENGTH, ZSECP_ATTACK_MAX_LENGTH );
		while( ( crouch_fire || ( sys.getTime() < mintime ) ) && ( sys.getTime() < endtime ) ) {
			playAnim( ANIMCHANNEL_TORSO, "range_attack_loop" );
			while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
				if ( sys.influenceActive() ) {
					crouch_fire = false;
					endtime = 0;
					break;
				}
				if ( AI_PAIN ) {
					Torso_Pain();
				}
				waitFrame();
			}
		}

		first_shot = false;
		if ( !crouch_fire ) {
			break;
		}

		playCycle( ANIMCHANNEL_TORSO, "range_attack_aim" );
		endtime = RandomDelay( ZSECP_WAIT_MIN_LENGTH, ZSECP_WAIT_MAX_LENGTH );
		while( crouch_fire && ( sys.getTime() < endtime ) ) {
			if ( sys.influenceActive() ) {
				crouch_fire = false;
				endtime = 0;
				break;
			}
			if ( AI_PAIN ) {
				Torso_Pain();
			}
			waitFrame();
		}
	}
	
	playAnim( ANIMCHANNEL_TORSO, "range_attack_end" );
	while( !animDone( ANIMCHANNEL_TORSO, 6 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
	
	finishAction( "crouch_attack" );
	setAnimPrefix( "" );
	
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 6 );
}

/***********************************************************************

	Legs animation control

***********************************************************************/

void monster_zombie_security_pistol::Legs_Idle() {
	idleAnim( ANIMCHANNEL_LEGS, "stand" );

	eachFrame {
		if ( getEnemy() ) {
			run = true;
		}
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 8 ); }
		if ( AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 8 ); }
	}
}

void monster_zombie_security_pistol::Legs_Walk() {
	playCycle( ANIMCHANNEL_LEGS, "walk" );
	
	eachFrame {
		if ( getEnemy() ) {
			run = true;
		}
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 8 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 ); }
	}
}

void monster_zombie_security_pistol::Legs_Run() {
	playCycle( ANIMCHANNEL_LEGS, "run" );
	
	eachFrame {
		if ( getEnemy() ) {
			run = true;
		}
		if ( !run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 8 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 ); }
	}
}

void monster_zombie_security_pistol::Legs_DodgeLeft() {
	playAnim( ANIMCHANNEL_LEGS, "evade_left" );

	while( !animDone( ANIMCHANNEL_LEGS, 8 ) ) {
		waitFrame();
	}
	
	finishAction( "strafe" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 );
}

void monster_zombie_security_pistol::Legs_DodgeRight() {
	playAnim( ANIMCHANNEL_LEGS, "evade_right" );

	while( !animDone( ANIMCHANNEL_LEGS, 8 ) ) {
		waitFrame();
	}

	finishAction( "strafe" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 );
}

void monster_zombie_security_pistol::Legs_StepLeft() {
	playAnim( ANIMCHANNEL_LEGS, "step_left" );

	while( !animDone( ANIMCHANNEL_LEGS, 4 ) ) {
		waitFrame();
	}
	
	finishAction( "sidestep" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 );
}

void monster_zombie_security_pistol::Legs_StepRight() {
	playAnim( ANIMCHANNEL_LEGS, "step_right" );

	while( !animDone( ANIMCHANNEL_LEGS, 4 ) ) {
		waitFrame();
	}

	finishAction( "sidestep" );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 4 );
}




